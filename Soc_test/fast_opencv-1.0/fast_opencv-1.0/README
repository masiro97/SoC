FAST feature detectors in OpenCV
--------------------------------

To use the code, you will need to compile the following files:

cv_fast_9.cc
cv_fast_10.cc
cv_fast_11.cc
cv_fast_12.cc
cvfast.cc

To use the code, #include "cvfast.h", and call the function:

void cvCornerFast( const CvArr* image, int threshold, int N,
                   int nonmax_suppression, int* ret_number_of_corners,
                   CvPoint** ret_corners);

image:      OpenCV image in which to detect corners. Must be 8 bit unsigned.
threshold:  Threshold for detection (higher is fewer corners). 0--255
N:          Arc length of detector, 9, 10, 11 or 12. 9 is usually best.
nonmax_suppression: Whether to perform nonmaximal suppression.
ret_number_of_corners: The number of detected corners is returned here.
ret_corners: The corners are returned here.


test.cc is a simple, complete example.

If the references are:
    * Machine learning for high-speed corner detection, 
	     E. Rosten and T. Drummond, ECCV 2006
	* Faster and better: A machine learning approach to corner detection
	     E. Rosten, R. Porter and T. Drummond, PAMI, 2009

The Bibtex entries are:

@inproceedings{rosten_2006_machine,
    title       =    "Machine learning for high-speed corner detection",
    author      =    "Edward Rosten and Tom Drummond",
    year        =    "2006",
    month       =    "May",
    booktitle   =    "European Conference on Computer Vision (to appear)",
    notes       =    "Poster presentation",
    url         =    "http://mi.eng.cam.ac.uk/~er258/work/rosten_2006_machine.pdf"
}

@article{rosten_2009_faster,
	title       =    "Faster and better: A machine learning approach to corner detection",
	author      =    "Edward Rosten and Reid Porter and Tom Drummond",
	year        =    "2009",
	journal     =    "IEEE Trans. Pattern Analysis and Machine Intelligence (to appear)",
	eprint      =    "arXiv:0810.2434 [cs.CV]",
	url         =    "http://lanl.arXiv.org/pdf/0810.2434"
}

